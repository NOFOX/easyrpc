// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsecho_messageImpl();
void InitDefaultsecho_message();
void InitDefaultsauto_weather_messageImpl();
void InitDefaultsauto_weather_message();
inline void InitDefaults() {
  InitDefaultsecho_message();
  InitDefaultsauto_weather_message();
}
}  // namespace protobuf_common_2eproto
class auto_weather_message;
class auto_weather_messageDefaultTypeInternal;
extern auto_weather_messageDefaultTypeInternal _auto_weather_message_default_instance_;
class echo_message;
class echo_messageDefaultTypeInternal;
extern echo_messageDefaultTypeInternal _echo_message_default_instance_;

// ===================================================================

class echo_message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:echo_message) */ {
 public:
  echo_message();
  virtual ~echo_message();

  echo_message(const echo_message& from);

  inline echo_message& operator=(const echo_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  echo_message(echo_message&& from) noexcept
    : echo_message() {
    *this = ::std::move(from);
  }

  inline echo_message& operator=(echo_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const echo_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const echo_message* internal_default_instance() {
    return reinterpret_cast<const echo_message*>(
               &_echo_message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(echo_message* other);
  friend void swap(echo_message& a, echo_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline echo_message* New() const PROTOBUF_FINAL { return New(NULL); }

  echo_message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const echo_message& from);
  void MergeFrom(const echo_message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(echo_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 age = 2;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:echo_message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 age_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
  friend void ::protobuf_common_2eproto::InitDefaultsecho_messageImpl();
};
// -------------------------------------------------------------------

class auto_weather_message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:auto_weather_message) */ {
 public:
  auto_weather_message();
  virtual ~auto_weather_message();

  auto_weather_message(const auto_weather_message& from);

  inline auto_weather_message& operator=(const auto_weather_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  auto_weather_message(auto_weather_message&& from) noexcept
    : auto_weather_message() {
    *this = ::std::move(from);
  }

  inline auto_weather_message& operator=(auto_weather_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const auto_weather_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const auto_weather_message* internal_default_instance() {
    return reinterpret_cast<const auto_weather_message*>(
               &_auto_weather_message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(auto_weather_message* other);
  friend void swap(auto_weather_message& a, auto_weather_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline auto_weather_message* New() const PROTOBUF_FINAL { return New(NULL); }

  auto_weather_message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const auto_weather_message& from);
  void MergeFrom(const auto_weather_message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(auto_weather_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string city_name = 1;
  void clear_city_name();
  static const int kCityNameFieldNumber = 1;
  const ::std::string& city_name() const;
  void set_city_name(const ::std::string& value);
  #if LANG_CXX11
  void set_city_name(::std::string&& value);
  #endif
  void set_city_name(const char* value);
  void set_city_name(const char* value, size_t size);
  ::std::string* mutable_city_name();
  ::std::string* release_city_name();
  void set_allocated_city_name(::std::string* city_name);

  // string weather = 2;
  void clear_weather();
  static const int kWeatherFieldNumber = 2;
  const ::std::string& weather() const;
  void set_weather(const ::std::string& value);
  #if LANG_CXX11
  void set_weather(::std::string&& value);
  #endif
  void set_weather(const char* value);
  void set_weather(const char* value, size_t size);
  ::std::string* mutable_weather();
  ::std::string* release_weather();
  void set_allocated_weather(::std::string* weather);

  // @@protoc_insertion_point(class_scope:auto_weather_message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr city_name_;
  ::google::protobuf::internal::ArenaStringPtr weather_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
  friend void ::protobuf_common_2eproto::InitDefaultsauto_weather_messageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// echo_message

// string name = 1;
inline void echo_message::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& echo_message::name() const {
  // @@protoc_insertion_point(field_get:echo_message.name)
  return name_.GetNoArena();
}
inline void echo_message::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo_message.name)
}
#if LANG_CXX11
inline void echo_message::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:echo_message.name)
}
#endif
inline void echo_message::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo_message.name)
}
inline void echo_message::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo_message.name)
}
inline ::std::string* echo_message::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:echo_message.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* echo_message::release_name() {
  // @@protoc_insertion_point(field_release:echo_message.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void echo_message::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:echo_message.name)
}

// int32 age = 2;
inline void echo_message::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 echo_message::age() const {
  // @@protoc_insertion_point(field_get:echo_message.age)
  return age_;
}
inline void echo_message::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:echo_message.age)
}

// -------------------------------------------------------------------

// auto_weather_message

// string city_name = 1;
inline void auto_weather_message::clear_city_name() {
  city_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& auto_weather_message::city_name() const {
  // @@protoc_insertion_point(field_get:auto_weather_message.city_name)
  return city_name_.GetNoArena();
}
inline void auto_weather_message::set_city_name(const ::std::string& value) {
  
  city_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:auto_weather_message.city_name)
}
#if LANG_CXX11
inline void auto_weather_message::set_city_name(::std::string&& value) {
  
  city_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auto_weather_message.city_name)
}
#endif
inline void auto_weather_message::set_city_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auto_weather_message.city_name)
}
inline void auto_weather_message::set_city_name(const char* value, size_t size) {
  
  city_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auto_weather_message.city_name)
}
inline ::std::string* auto_weather_message::mutable_city_name() {
  
  // @@protoc_insertion_point(field_mutable:auto_weather_message.city_name)
  return city_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* auto_weather_message::release_city_name() {
  // @@protoc_insertion_point(field_release:auto_weather_message.city_name)
  
  return city_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void auto_weather_message::set_allocated_city_name(::std::string* city_name) {
  if (city_name != NULL) {
    
  } else {
    
  }
  city_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city_name);
  // @@protoc_insertion_point(field_set_allocated:auto_weather_message.city_name)
}

// string weather = 2;
inline void auto_weather_message::clear_weather() {
  weather_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& auto_weather_message::weather() const {
  // @@protoc_insertion_point(field_get:auto_weather_message.weather)
  return weather_.GetNoArena();
}
inline void auto_weather_message::set_weather(const ::std::string& value) {
  
  weather_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:auto_weather_message.weather)
}
#if LANG_CXX11
inline void auto_weather_message::set_weather(::std::string&& value) {
  
  weather_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auto_weather_message.weather)
}
#endif
inline void auto_weather_message::set_weather(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  weather_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auto_weather_message.weather)
}
inline void auto_weather_message::set_weather(const char* value, size_t size) {
  
  weather_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auto_weather_message.weather)
}
inline ::std::string* auto_weather_message::mutable_weather() {
  
  // @@protoc_insertion_point(field_mutable:auto_weather_message.weather)
  return weather_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* auto_weather_message::release_weather() {
  // @@protoc_insertion_point(field_release:auto_weather_message.weather)
  
  return weather_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void auto_weather_message::set_allocated_weather(::std::string* weather) {
  if (weather != NULL) {
    
  } else {
    
  }
  weather_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weather);
  // @@protoc_insertion_point(field_set_allocated:auto_weather_message.weather)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
